# Generated by Django 2.2.1 on 2019-05-09 18:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvertListView',
            fields=[
                ('advert_id', models.IntegerField(primary_key=True, serialize=False)),
                ('advert_type', models.TextField()),
                ('first_name', models.CharField(max_length=40)),
                ('city', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=100)),
                ('posted_on', models.DateTimeField()),
                ('genre', models.CharField(max_length=50)),
                ('profession', models.CharField(max_length=50)),
                ('band_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'advert_list_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AdvertView',
            fields=[
                ('advert_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=40)),
                ('city', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('genre', models.CharField(max_length=50)),
                ('profession', models.CharField(max_length=50)),
                ('band_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'advert_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BandMemberView',
            fields=[
                ('band_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('members', models.TextField()),
            ],
            options={
                'db_table': 'band_members_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserListView',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=40)),
                ('email', models.CharField(max_length=100)),
                ('photo_url', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=50)),
                ('prof', models.TextField()),
                ('genre', models.TextField()),
            ],
            options={
                'db_table': 'user_list_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserMessageView',
            fields=[
                ('msg_id', models.IntegerField(primary_key=True, serialize=False)),
                ('email_from', models.CharField(max_length=100)),
                ('email_to', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=100)),
                ('read', models.BooleanField()),
            ],
            options={
                'db_table': 'user_message_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfileView',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=50)),
                ('nickname', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('photo', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=50)),
                ('video', models.CharField(max_length=255)),
                ('prof', models.TextField()),
                ('genre', models.TextField()),
                ('bands', models.TextField()),
            ],
            options={
                'db_table': 'user_profile_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('photo_url', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genre_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'genre',
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('prof_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'profession',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('video_id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'videos',
            },
        ),
        migrations.CreateModel(
            name='PrivateMessages',
            fields=[
                ('msg_id', models.AutoField(primary_key=True, serialize=False)),
                ('sent_time', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('read', models.BooleanField(blank=True, null=True)),
                ('user_from', models.ForeignKey(blank=True, db_column='user_from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_from', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(blank=True, db_column='user_to', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'private_messages',
            },
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('band_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('year_founded', models.DateField(blank=True, null=True)),
                ('photo', models.CharField(blank=True, max_length=255, null=True)),
                ('homepage', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.City')),
                ('genres', models.ManyToManyField(db_table='band_genre', to='muzi_muzi.Genre')),
                ('members', models.ManyToManyField(db_table='user_band', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'band',
            },
        ),
        migrations.CreateModel(
            name='Advert',
            fields=[
                ('advert_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('posted_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('band', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.Band')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.Genre')),
                ('profession', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.Profession')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'advert',
            },
        ),
        migrations.AddField(
            model_name='users',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.City'),
        ),
        migrations.AddField(
            model_name='users',
            name='genres',
            field=models.ManyToManyField(to='muzi_muzi.Genre'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='professions',
            field=models.ManyToManyField(to='muzi_muzi.Profession'),
        ),
        migrations.AddField(
            model_name='users',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.Role'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='users',
            name='video',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='muzi_muzi.Videos'),
        ),
        migrations.RunSQL("""
            drop view if exists user_messages_view;
            drop view if exists band_members_view;
            drop view if exists advert_view;
            drop view if exists user_list_view;
            drop view if exists user_profile_view;
            drop view if exists advert_list_view;

            create view user_messages_view as (
                with emails_to as (
                    select email as email_to, title
                    from private_messages pm
                             join users u on pm.user_to = u.user_id
                ),
                     emails_from as (
                         select email as email_from, title
                         from private_messages pm
                                  join users u3 on pm.user_from = u3.user_id
                     )

                select email_from, email_to, pm.title, pm.msg_id, pm.read
                from private_messages pm,
                     emails_from,
                     emails_to
            );

            create view band_members_view as
            select b.band_id, b.name, string_agg(u.first_name || ' ' || u.last_name, ', ') as members
            from band b
                     join user_band ub on b.band_id = ub.band_id
                     join users u on ub.users_id = u.user_id
            group by b.band_id;

            create view advert_view as (
                select first_name,
                       a.advert_id as advert_id,
                       c.name     city,
                       a.title,
                       a.description,
                       g.name     genre,
                       p.name     profession,
                       case
                           when a.band_id is not null then (
                               select b.name
                               from band b
                                        join advert a2 on b.band_id = a2.band_id
                           )
                           else null
                           end as band_name
                from users
                         join advert a on users.user_id = a.user_id
                         join profession p on a.profession_id = p.prof_id
                         join genre g on a.genre_id = g.genre_id
                         join city c on users.city_id = c.city_id
            );

            create view advert_list_view as (
                select a.advert_id,
                       case
                           when a.band_id is not null then 'band advert'
                           else 'musician advert'
                           end as advert_type,
                       first_name,
                       c.name     city,
                       a.title,
                       a.posted_on,
                       g.name     genre,
                       p.name     profession,
                       case
                           when a.band_id is not null then (
                               select b.name
                               from band b
                                        join advert a2 on b.band_id = a2.band_id
                           )
                           else null
                           end as band_name
                from users
                         join advert a on users.user_id = a.user_id
                         join profession p on a.profession_id = p.prof_id
                         join genre g on a.genre_id = g.genre_id
                         join city c on users.city_id = c.city_id
            );

            create view user_list_view as (
                select u.user_id,
                       u.first_name,
                       u.email,
                       u.photo_url,
                       c.name                               city,
                       string_agg(distinct p.name, ', ') as prof,
                       string_agg(distinct g.name, ', ') as genre
                from users u
                         join city c on u.city_id = c.city_id
                         join users_professions up on u.user_id = up.users_id
                         join profession p on up.profession_id = p.prof_id
                         join users_genres ug on u.user_id = ug.users_id
                         join genre g on ug.genre_id = g.genre_id
                group by u.first_name, u.email, u.photo_url, c.name, u.user_id
            );

            create view user_profile_view as (
                select u.user_id,
                       u.first_name,
                       u.last_name,
                       u.username,
                       u.email,
                       u.description,
                       u.photo_url                          photo,
                       c.name                               city,
                       (select v.url from videos v where u.video_id = v.video_id)
                       video,
                       string_agg(distinct p.name, ', ') as prof,
                       string_agg(distinct g.name, ', ') as genre,
                       (select string_agg(b.name, ', ')
                                 from band b
                                          join user_band ub on b.band_id = ub.band_id
                                 where ub.users_id = u.user_id)                      as bands
                from users u
                         join city c on u.city_id = c.city_id
                         join users_professions up on u.user_id = up.users_id
                         join profession p on up.profession_id = p.prof_id
                         join users_genres ug on u.user_id = ug.users_id
                         join genre g on ug.genre_id = g.genre_id
                group by u.user_id, u.first_name, u.email, u.photo_url, c.name, video
            );
            """),
        migrations.RunSQL("""
            insert into role (name) values ('USER');
            insert into role (name) values ('ADMIN');

            insert into profession (name) values ('Electric Guitar');
            insert into profession (name) values ('Electric Bass');
            insert into profession (name) values ('Piano');
            insert into profession (name) values ('Drums');
            insert into profession (name) values ('Keyboards');
            insert into profession (name) values ('Flute');
            insert into profession (name) values ('Classical Guitar');
            insert into profession (name) values ('Violin');
            insert into profession (name) values ('Saxophone');
            insert into profession (name) values ('Vocal');

            insert into genre (name) values ('Hard Rock');
            insert into genre (name) values ('EDM');
            insert into genre (name) values ('Jazz');
            insert into genre (name) values ('Dub step');
            insert into genre (name) values ('Pop');
            insert into genre (name) values ('Folk');
            insert into genre (name) values ('Indie Rock');
            insert into genre (name) values ('Punk');
            insert into genre (name) values ('Metal');
            insert into genre (name) values ('Blues');
            insert into genre (name) values ('Country');
            insert into genre (name) values ('Hip-hop');
            insert into genre (name) values ('RnB');
            """)
    ]
